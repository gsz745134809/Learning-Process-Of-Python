# 类的命名采用 大驼峰命名法
# （即每一个单词的首字母大写，单词与单词之间没有下划线）

# 类名的确定
# 名词提炼法 分析整个业务流程，出现的 名词，通常就是找到的类

# 属性和方法的确定
# 对 对象的特征描述，通常可以定义成 属性
# 对象具有的行为（动词），通常可以定义成 方法

dir(对象名) # 内置函数，可以查看该对象内的 所有属性和方法
__方法名__  # 该格式的方法是Python提供的 内置方法/属性

__new__  # 此方法是：创建对象时，会被自动调用
__init__ # 此方法是：对象被初始化时，会被自动调用
__del__  # 此方法是：对象被从内存中销毁前，会被自动调用
__str__  # 此方法是：返回对象的描述信息，print函数输出使用



# 定义简单的类
class 类名:
	
	# 哪一个对象调用的方法，self 就是哪一个对象的引用
		
	def 方法1(self, 参数列表):
		# 可以在方法体内用 self.属性 调用该对象的属性
		pass
		
	def 方法2(self, 参数列表):
		pass


# 创建对象
对象变量 = 类名()


# 引用概念
"""
在Python中使用类创建对象之后，tom变量中仍然记录的是对象在内存中的地址
也就是tom变量 引用了新建的猫对象
使用print输出对象变量，默认情况下，是能够输出这个变量 引用的对象 是由哪一个类创建的对象，以及 在内存中的地址（16进制表示）

提示： 在计算机中，通常使用十六进制表示内存地址

%d 可以以10进制输出数字
%x 可以以16进制输出数字


"""


"""
3.2、使用self在方法内部输出每一只猫的名字
	由哪一个对象调用的方法，方法内的self就是哪一个对象的引用
	、在类封装的方法内部，self 就表示当前调用方法的对象自己
	、调用方法时，程序员不需要传递self参数
	、在方法内部
		、可以通过 self. 访问对象的属性
		、也可以通过 self. 调用其它的对象方法


"""


"""
4.2、初始化方法
当使用 类名() 创建对象时，会自动执行以下操作：
	1、为对象在内存中分配空间--创建对象
	2、为对象的属性设置初始值--初始化方法（init）
这个初始化方法就是 __init__ 方法， __init__ 是对象的内置方法
	__init__ 方法是专门来定义一个类具有哪些属性的方法！


4.3、在初始化方法内部定义属性
	、在 __init__ 方法内部使用 self.属性名 = 属性的初始值 就可以定义属性
	、定义属性之后，再使用 Cat 类创建的对象，都会拥有该属性

"""

"""
4.4、改造初始化方法 -- 初始化的同时设置初始值
在开发中如果希望在创建对象的同时，就设置对象的属性，可以对 __init__ 方法进行改造
	1、把希望设置的属性值定义成 __init__ 方法的参数
	2、在方法内部使用 self.属性 = 形参 接收外部传递的参数
	3、在创建对象时，使用类名(属性1,属性2...) 调用
"""
class Cat:
	def __init__(self, name):
		print("初始化方法 %s " % name)
		self.name = name		
		...
tom = Cat("Tom")
...
lazy_cat = Cat("大懒猫")
...



"""
05、内置方法和属性

__del__ 方法 ，作用是：对象被从内存中销毁前，会被自动调用
__str__ 方法 ，作用是：返回对象的描述信息，print函数输出使用


5.1、__del__ 方法
在Python中
	、当使用 类名() 创建对象时，为对象分配完空间后，自动调用 __init__ 方法
	、当一个对象被从内存中销毁前，会自动调用 __del__ 方法
应用场景
	、__init__ 改造初始化方法，可以让创建对象更加灵活
	、__del__ 如果希望在对象被销毁前，再做一些事情，可以考虑一下 __del__ 方法
生命周期
	、一个对象从调用 类名() 创建，生命周期开始
	、一个对象的 __del__ 方法一旦被调用，生命周期结束
	、在对象的生命周期内，可以访问对象属性，或者让对象调用方法


5.2、__str__ 方法
、在Python中，使用 print输出对象变量，默认情况下，会输出这个变量 引用的对象 是由哪一个类创建的对象，以及在内存中的地址（十六进制表示）
、如果在开发中，希望使用print 输出对象变量时，能够打印自定义的内容，就可以利用 __str__ 这个内置方法了
注意： __str__ 方法必须返回一个字符串

"""
class Cat:
	def __init__(self, new_name):
		print("初始化方法 %s " % name)
		self.name = new_name		
		print("%s 来了" % self.name)
	def __del__(self):
		print("%s 我去了" % self.name)
	def __str__(self):
		# 必须返回一个字符串
		return "我是小猫 %s " % self.name
tom = Cat("Tom")
print(tom)





##### 被使用的类先开发

# 一个对象的 属性 可以是 另外一个类创建的对象


"""
02、身份运算符
身份运算符用于比较两个对象的 内存地址 是否一致 -- 是否是对同一个对象的引用
、在Python中针对None比较时，建议使用 is 判断

运算符  | 描述                                       | 实例
is      | is是判断两个标识符是不是引用同一个对象     | x is y，类似id(x) == id(y) 
is not  | is not是判断两个标识符是不是引用不同对象   | x is not y, 类似id(a) != id(b)

is与 == 的区别：
、is 用于判断 两个变量 引用对象是否为同一个
、== 用于判断 引用变量的值 是否相等

"""



# 定义属性或方法时，在属性名或者方法名前 增加两个下划线，定义的就是私有属性或方法
# 伪私有 
# 处理方式：在名称前面加上 _类名 => _类名__名称
