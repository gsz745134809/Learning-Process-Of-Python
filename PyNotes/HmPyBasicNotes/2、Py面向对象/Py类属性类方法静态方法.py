"""
、每一个对象 都有自己 独立的内存空间，保存各自不同的属性
、多个对象的方法，在内存中只有一份，在调用方法时，需要把对象的引用 传递到方法内部

"""




# 类方法

@classmethod
def 类方法名(cls):
	pass

"""
、类方法需要用修饰器 @classmethod 来标识，告诉解释器这是一个类方法
、类方法的第一个参数应该是 cls
	、由 哪一个类 调用的方法，方法内的cls就是哪一个类的引用
	、这个参数和 实例方法 的第一个参数是self类似
	、提示 使用其他名称也可以，不过习惯使用cls
、通过 类名. 调用类方法，调用方法时，不需要传递cls参数
、在方法内部
	、也可以通过 cls. 访问类的属性
	、也可以通过 cls. 调用其他的类方法

"""




# 静态方法
"""
在开发时，如果需要在类中封装一个方法，这个方法：
	、既不需要访问实例属性或者调用实例方法
	、也不需要访问类属性或者调用类方法
这个时候，可以把这个方法封装成一个静态方法

"""

@staticmethod
def 静态方法名():
	pass


# 静态方法需要用修饰器 @staticmethod 来标识，告诉解释器这是一个静态方法
# 通过 类名. 调用静态方法
