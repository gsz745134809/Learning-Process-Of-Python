# 迭代器

'''
迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。
迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。
'''


# 1、可迭代对象
'''
我们已经知道可以对list、tuple、str等类型的数据使用for...in...的循环语法从其中
依次拿到数据进行使用，我们把这样的过程称为遍历，也叫迭代。
'''

# 但是，是否所有的数据类型都可以放到for...in...的语句中，然后让for...in...每次从中
# 取出一条数据供我们使用，即供我们迭代吗？


In [1]: for i in 100:
   ...:     print(i)
   ...:
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-1-86150fa0c47d> in <module>
----> 1 for i in 100:
      2     print(i)
      3

TypeError: 'int' object is not iterable


元组、列表、字典、集合、字符串 都可以迭代


# 判断是否可以迭代，返回True就能用
In [2]: from collections import Iterable

In [3]: isinstance([11, 22, 33], Iterable)
Out[3]: True

In [4]: isinstance(100, Iterable)
Out[4]: False







如果想要一个对象称为一个 可以迭代的对象，即可以使用for，那么必须实现__iter__方法，
然后__iter__方法返回一个对象（可以是对象自己）(这个对象里面必须有__iter__方法和__next__（__next__方法每次返回原对象的下一个值）方法（此时这个对象称为迭代器）)的引用



def __iter__(self):
	return 
	
	
def __next__(self):
	


（
for temp in xxxx_obj:
	pass
	
1、判断xxxx_obj是否是可以迭代
2、在第一步成立的前提下，调用iter函数得到xxxx_obj对象的__iter__方法的返回值
3、__iter__方法的返回值是一个迭代器	

）



range(10)  # 返回一个列表，（占用空间大）
[out]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

xrange() # 返回一个对象，（占用空间小）
[out]: xrange()







'''
我们发现迭代器最核心的功能就是可以通过next()函数的调用来返回下一个数据值。
如果每次返回的数据值不是在一个已有的数据集合中读取的，而是通过程序按照一定的规律计算生成的，
那么也就意味着可以不用再依赖一个已有的数据集合，也就是说不用再将所有要迭代的数据都一次性缓存下来
供后续依次读取，这样可以节省大量的存储（内存）空间。



'''



# 重新生成列表任何往进插入原来的元组的值
a = (11,22,33)
list(a)



































