'''
进程池Pool

当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态生成多个进程，但如果
是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的
Pool方法。

初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，那么就会创建
一个新的进程来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，直到池中
有进程结束，才会用之前的进程来执行新的任务，请看下面的实例：

'''

from multiprocessing import Pool
import os, time, random

def worker(msg):
	t_start = time.time()
	print("%s 开始执行，进程号为 %d" % (msg, os.getpid()))
	# random.random() 随机生成0~1之间的浮点数
	time.sleep(random.random()*2)
	t_stop = time.time()
	print(msg, "执行完毕，耗时 %0.2f" % (t_stop-t_start))
	
if __name__ == '__main__':	
	po = Pool(3)  # 定义一个进程池，最大进程数为 3
	for i in range(0, 10):
		# Pool().apply_async(要调用的目标， (传递给目标的参数元组, ))
		# 每次循环将会用 空闲出来的子进程 去调用目标
		po.apply_async(worker, (i, ))


	print("-----start-----")
	po.close()  # 关闭进程池，关闭后 po 不再接收新的请求
	po.join()  # 等待 po 中所有子进程执行完成， 必须放在close语句之后
	print("------end------")



-----start-----
0 开始执行，进程号为 9032
1 开始执行，进程号为 4124
2 开始执行，进程号为 6596
2 执行完毕，耗时 0.43
3 开始执行，进程号为 6596
0 执行完毕，耗时 1.12
4 开始执行，进程号为 9032
1 执行完毕，耗时 1.93
5 开始执行，进程号为 4124
3 执行完毕，耗时 1.57
6 开始执行，进程号为 6596
4 执行完毕，耗时 1.27
7 开始执行，进程号为 9032
5 执行完毕，耗时 0.82
8 开始执行，进程号为 4124
8 执行完毕，耗时 0.01
9 开始执行，进程号为 4124
9 执行完毕，耗时 0.09
6 执行完毕，耗时 0.89
7 执行完毕，耗时 1.76
------end------


可以看到 0号和4号的进程号相同















